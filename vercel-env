#!/usr/bin/env bash

# Colors
white='\033[0;37m'
grey='\033[0;90m'
red='\033[0;31m'
yellow='\033[0;33m'
green='\033[0;32m'
blue='\033[0;34m'
cyan='\033[0;36m'
white_bold='\033[1;37m'
grey_bold='\033[1;90m'
red_bold='\033[1;31m'
yellow_bold='\033[1;33m'
green_bold='\033[1;32m'
blue_bold='\033[1;34m'
cyan_bold='\033[1;36m'
reset='\033[0m'

up_one_line='\033[1A'
carriage_return='\r'
clear_line='\033[K'

# Vercel environment variable IDs
# https://vercel.com/docs/rest-api/reference/endpoints/projects/retrieve-the-environment-variables-of-a-project-by-id-or-name
env_var_name_id_pairs=(
    'OPENAI_API_KEY:4D24qy3C1FCsSnZK'
    'ANTHROPIC_API_KEY:JpYkeNUUdVbKVk0C'
    'GEMINI_API_KEY:2i1SGIw7AIjJGP2j'
    'GROK_API_KEY:n6GLZhSMmjuDvJM3'
    'OPENROUTER_API_KEY:ArFT4vGYrspAUHsK'
    'GROQ_API_KEY:0rPxZJZbR1ptDxU5'
    'DEEPSEEK_API_KEY:1dHNV4QB4w20G48F'
    'MISTRAL_API_KEY:JdlycdMFIGUsDLka'
    'INCEPTION_API_KEY:eTYlsVsn7EP1CZOf'
    'COHERE_API_KEY:yNhL43mmNDUCfCnM'
    'EXA_API_KEY:YuL86O0dQr3Mj2dN'
)

# Arguments
ACTION="${1:-}"

if [[ -z "${ACTION}" ]]; then
    echo
    echo -e "  ${red_bold}❌ ${white_bold}Action <on|off|status> is required${reset}"
    echo -e "     ${white}Usage: ${cyan}./vercel-env <on|off|status>${reset}"
    echo

    exit 1
fi

if [[ -f .env.vercel ]]; then
    source .env.vercel
else
    echo
    echo -e "  ${red_bold}❌ ${white_bold}.env.vercel file not found${reset}"
    echo

    exit 1
fi

if [[ -z "${VERCEL_TOKEN:-}" ]]; then
    echo
    echo -e "  ${red_bold}❌ ${white_bold}VERCEL_TOKEN not found in .env.vercel file${reset}"
    echo

    exit 1
fi

check_status() {
    echo
    echo -e "  ${blue_bold}➜ ${white_bold}Checking status...${reset}"

    env_var_id="${env_var_name_id_pairs[0]#*:}"
    
    value=$(curl -fsS -X GET \
        --url "https://api.vercel.com/v1/projects/plump-gpt/env/${env_var_id}" \
        --header "Authorization: Bearer $VERCEL_TOKEN" | jq -r '.value')

    if [[ $value == "____" ]]; then
        echo -e "  ${red_bold}✗ ${white}Keys are currently ${red_bold}inactive${reset}"
    else
        echo -e "  ${green_bold}✔ ${white}Keys are currently ${green_bold}active${reset}"
    fi

    echo
}

activate_keys() {
    echo
    echo -e "${blue_bold}➜ ${white_bold}Activating environment variables...${reset}"
    echo

    for name_id_pair in "${env_var_name_id_pairs[@]}"; do
        env_var_name="${name_id_pair%:*}"  # everything before the colon
        env_var_id="${name_id_pair#*:}"    # everything after the colon
        
        echo -e "  ${grey_bold}• ${grey}${env_var_name}${reset}"

        curl -fsS -X PATCH \
            -H "Authorization: Bearer $VERCEL_TOKEN" \
            -H "Content-Type: application/json" \
            --url "https://api.vercel.com/v9/projects/plump-gpt/env/${env_var_id}" \
            --data "{
                \"key\":    \"${env_var_name}\",
                \"target\": [\"production\", \"preview\", \"development\"],
                \"type\":   \"encrypted\",
                \"value\":  \"${!env_var_name}\"
            }" >/dev/null

        echo -e "${up_one_line}${carriage_return}  ${green_bold}✔ ${white}${env_var_name}${reset}"
    done
}

deactivate_keys() {
    echo
    echo -e "${blue_bold}➜ ${white_bold}Deactivating environment variables...${reset}"
    echo

    for name_id_pair in "${env_var_name_id_pairs[@]}"; do
        env_var_name="${name_id_pair%:*}"  # everything before the colon
        env_var_id="${name_id_pair#*:}"    # everything after the colon
        
        echo -e "  ${grey_bold}• ${grey}${env_var_name}${reset}"

        curl -fsS -X PATCH \
            -H "Authorization: Bearer $VERCEL_TOKEN" \
            -H "Content-Type: application/json" \
            --url "https://api.vercel.com/v9/projects/plump-gpt/env/${env_var_id}" \
            --data "{
                \"key\":    \"${env_var_name}\",
                \"target\": [\"production\", \"preview\", \"development\"],
                \"type\":   \"encrypted\",
                \"value\":  \"____\"
            }" >/dev/null

        echo -e "${up_one_line}${carriage_return}  ${red_bold}✗ ${white}${env_var_name}${reset}"
    done
}

redeploy_last() {
    echo
    echo -e "  ${blue_bold}➜ ${white_bold}Redeploy?"
    echo -ne "    ${cyan}(y/n): ${white_bold}"
    read -n 1 -r REPLY
    echo -e "${reset}"

    if [[ $REPLY =~ ^[Yy]$ ]]; then
        echo
        echo -e "  ${blue_bold}➜ ${white_bold}Getting last deployment id...${reset}"

        deployment_id=$(curl -fsS -X GET \
            -H "Authorization: Bearer $VERCEL_TOKEN" \
            --url "https://api.vercel.com/v13/deployments/gpt.joekel.ly" | jq -r '.id')

        echo -e "  ${green_bold}✔ ${white}$deployment_id${reset}"
        echo
        echo -e "  ${blue_bold}➜ ${white_bold}Kicking off redeployment...${reset}"

        curl -fsS -X POST \
            -H "Authorization: Bearer $VERCEL_TOKEN" \
            -H "Content-Type: application/json" \
            --url "https://api.vercel.com/v13/deployments" \
            --data "{
                \"name\": \"plump-gpt\",
                \"deploymentId\": \"$deployment_id\",
                \"target\": \"production\"
            }" >/dev/null

        echo -e "  ${green_bold}✔ ${white}On its way: ${cyan}https://vercel.com/fallible/plump-gpt/deployments${reset}"
        echo
    else
        echo
    fi
}

case "$ACTION" in
    on)
        activate_keys
        redeploy_last
        ;;
    off)
        deactivate_keys
        redeploy_last
        ;;
    status)
        check_status
        ;;
esac
